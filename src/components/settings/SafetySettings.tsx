import React, { useState } from 'react';
import { useSettings } from '../../contexts/SettingsContext';
import './SettingsSection.css';

const SafetySettings: React.FC = () => {
  const { safetySettings, updateSafetySettings, userProfile, updateUserProfile } = useSettings();
  const [newChildAge, setNewChildAge] = useState('');
  const [newAllergy, setNewAllergy] = useState('');
  const [newCondition, setNewCondition] = useState('');

  const addChildAge = () => {
    const age = parseInt(newChildAge);
    if (age > 0 && age < 18) {
      updateSafetySettings({
        childrenAges: [...safetySettings.childrenAges, age].sort((a, b) => a - b)
      });
      setNewChildAge('');
    }
  };

  const removeChildAge = (age: number) => {
    updateSafetySettings({
      childrenAges: safetySettings.childrenAges.filter(a => a !== age)
    });
  };

  const addAllergy = () => {
    if (newAllergy.trim()) {
      updateUserProfile({
        allergies: [...userProfile.allergies, newAllergy.trim()]
      });
      setNewAllergy('');
    }
  };

  const removeAllergy = (allergy: string) => {
    updateUserProfile({
      allergies: userProfile.allergies.filter(a => a !== allergy)
    });
  };

  const addCondition = () => {
    if (newCondition.trim()) {
      updateUserProfile({
        medicalConditions: [...userProfile.medicalConditions, newCondition.trim()]
      });
      setNewCondition('');
    }
  };

  const removeCondition = (condition: string) => {
    updateUserProfile({
      medicalConditions: userProfile.medicalConditions.filter(c => c !== condition)
    });
  };

  return (
    <div className="settings-section">
      <h2 className="section-title">ЁЯЫбя╕П хоЙхЕишинхоЪ</h2>
      <p className="section-description">
        уБВуБкуБЯуБиуБФхо╢цЧПуБохоЙхЕиуБоуБЯуВБуАБшй│ч┤░уБкшинхоЪуВТшбМуБДуБ╛уБЩуАВ
        уБУуВМуВЙуБоцГЕха▒уБпуАБуВИуВКхоЙхЕиуБкуВкуВдуГлуБоцОихеиуБлф╜┐чФиуБХуВМуБ╛уБЩуАВ
      </p>

      <div className="safety-group">
        <h3>шЗкхЛХуГБуВзуГГуВпшинхоЪ</h3>
        
        <div className="toggle-item">
          <div className="toggle-label">
            <span>хжКхиахоЙхЕицАзуВТх╕╕уБлуГБуВзуГГуВп</span>
            <small>уБЩуБ╣уБжуБоуВкуВдуГлщБ╕цКЮцЩВуБлхжКхиаф╕нуБохоЙхЕицАзуВТчв║шкНуБЧуБ╛уБЩ</small>
          </div>
          <input
            type="checkbox"
            checked={safetySettings.alwaysCheckPregnancy}
            onChange={(e) => updateSafetySettings({
              alwaysCheckPregnancy: e.target.checked
            })}
          />
        </div>

        <div className="toggle-item">
          <div className="toggle-label">
            <span>хнРф╛ЫуБохоЙхЕицАзуВТх╕╕уБлуГБуВзуГГуВп</span>
            <small>уБКхнРцзШуБох╣┤щ╜вуБлх┐ЬуБШуБЯхоЙхЕицАзуВТчв║шкНуБЧуБ╛уБЩ</small>
          </div>
          <input
            type="checkbox"
            checked={safetySettings.alwaysCheckChildren}
            onChange={(e) => updateSafetySettings({
              alwaysCheckChildren: e.target.checked
            })}
          />
        </div>

        <div className="toggle-item">
          <div className="toggle-label">
            <span>уГЪуГГуГИуБохоЙхЕицАзуВТх╕╕уБлуГБуВзуГГуВп</span>
            <small>уГЪуГГуГИуБлцЬЙхо│уБкуВкуВдуГлуВТшнжхСКуБЧуБ╛уБЩ</small>
          </div>
          <input
            type="checkbox"
            checked={safetySettings.alwaysCheckPets}
            onChange={(e) => updateSafetySettings({
              alwaysCheckPets: e.target.checked
            })}
          />
        </div>

        <div className="toggle-item">
          <div className="toggle-label">
            <span>хЕЙцпТцАзшнжхСКуВТшбичд║</span>
            <small>цЧехЕЙуБлх╜УуБЯуВЛхЙНуБоф╜┐чФиуБлуБдуБДуБжшнжхСКуБЧуБ╛уБЩ</small>
          </div>
          <input
            type="checkbox"
            checked={safetySettings.photosensitivityWarning}
            onChange={(e) => updateSafetySettings({
              photosensitivityWarning: e.target.checked
            })}
          />
        </div>
      </div>

      <div className="safety-group">
        <h3>уБКхнРцзШуБох╣┤щ╜в</h3>
        <p className="form-help">уБКхнРцзШуБох╣┤щ╜вуБлх┐ЬуБШуБЯхоЙхЕиуБкф╜┐чФицЦ╣ц│ХуВТцПРцбИуБЧуБ╛уБЩ</p>
        
        <div className="tag-input-group">
          <input
            type="number"
            min="0"
            max="17"
            placeholder="х╣┤щ╜вуВТхЕехКЫ"
            value={newChildAge}
            onChange={(e) => setNewChildAge(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && addChildAge()}
          />
          <button type="button" onClick={addChildAge} className="btn-secondary">
            ш┐╜хКа
          </button>
        </div>

        <div className="tag-list">
          {safetySettings.childrenAges.map(age => (
            <span key={age} className="tag">
              {age}цн│
              <button onClick={() => removeChildAge(age)}>├Ч</button>
            </span>
          ))}
        </div>
      </div>

      <div className="safety-group">
        <h3>уВвуГмуГлуВоуГ╝</h3>
        <p className="form-help">уВвуГмуГлуВоуГ╝чЙйш│куВТхРлуВАхПпшГ╜цАзуБоуБВуВЛуВкуВдуГлуВТшнжхСКуБЧуБ╛уБЩ</p>
        
        <div className="tag-input-group">
          <input
            type="text"
            placeholder="уВвуГмуГлуВоуГ╝чЙйш│куВТхЕехКЫ"
            value={newAllergy}
            onChange={(e) => setNewAllergy(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && addAllergy()}
          />
          <button type="button" onClick={addAllergy} className="btn-secondary">
            ш┐╜хКа
          </button>
        </div>

        <div className="tag-list">
          {userProfile.allergies.map(allergy => (
            <span key={allergy} className="tag">
              {allergy}
              <button onClick={() => removeAllergy(allergy)}>├Ч</button>
            </span>
          ))}
        </div>
      </div>

      <div className="safety-group">
        <h3>цЧвх╛АчЧЗуГ╗цЬНчФиф╕нуБошЦм</h3>
        <p className="form-help">чЫ╕ф║Тф╜ЬчФиуБохПпшГ╜цАзуБМуБВуВЛха┤хРИуБлшнжхСКуБЧуБ╛уБЩ</p>
        
        <div className="tag-input-group">
          <input
            type="text"
            placeholder="чЧЕхРНуВДшЦмхРНуВТхЕехКЫ"
            value={newCondition}
            onChange={(e) => setNewCondition(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && addCondition()}
          />
          <button type="button" onClick={addCondition} className="btn-secondary">
            ш┐╜хКа
          </button>
        </div>

        <div className="tag-list">
          {userProfile.medicalConditions.map(condition => (
            <span key={condition} className="tag">
              {condition}
              <button onClick={() => removeCondition(condition)}>├Ч</button>
            </span>
          ))}
        </div>
      </div>

      <div className="safety-notice">
        <p>
          <strong>тЪая╕П щЗНшжБ:</strong> уБУуБошинхоЪуБпхМ╗чЩВуВвуГЙуГРуВдуВ╣уБлф╗гуВПуВЛуВВуБоуБзуБпуБВуВКуБ╛уБЫуВУуАВ
          хБех║╖ф╕КуБоцЗ╕х┐╡уБМуБВуВЛха┤хРИуБпуАБх┐ЕуБЪхМ╗чЩВх░ВщЦАхо╢уБлуБФчЫ╕шлЗуБПуБауБХуБДуАВ
        </p>
      </div>
    </div>
  );
};

export default SafetySettings;